<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GPU 硬件架构简要剖析</title>
      <link href="/2021/08/08/GPU-%E7%A1%AC%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%AE%80%E8%A6%81%E5%89%96%E6%9E%90/"/>
      <url>/2021/08/08/GPU-%E7%A1%AC%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%AE%80%E8%A6%81%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章主要介绍一下GPU底层的硬件架构以及GPU存储体系，为之后学习cuda编程打好基础。本文首先会对比CPU体系架构和GPU体系架构，看看它们分别适用于什么场景，为什么需要GPU以及GPU的设计原则。接着简单介绍下CPU体系架构，之后引入GPU体系架构，了解GPU在CPU的基础上增加了什么、减少了什么，以及为啥要这样裁剪。最后一起看下Nvidia系列的某些具体GPU芯片。</p></blockquote><h1 id="为什么需要GPU？"><a href="#为什么需要GPU？" class="headerlink" title="为什么需要GPU？"></a>为什么需要GPU？</h1><p>我们知道，cpu作为计算机的核心与大脑，它即负责程序的控制逻辑，也负责数据计算。作为通用处理器，一般来说CPU啥都能做，那为啥还需要GPU呢？原因是CPU本质还是通用处理器，他需要处理所有的场景，不能偏科，所以CPU还是以控制逻辑为主，计算只是他的一部分。CPU擅长处理逻辑复杂但计算量相对较小的业务逻辑，他是控场大师，是政治家，运筹帷幄，合纵连横，不做莽夫的事情。</p><p>而GPU不一样，GPU创立之初就是为了处理那些逻辑简单但计算量庞大的任务，例如大规模矩阵乘法这种大量的乘法和加法操作，它不会面对if else switch等判断跳转逻辑。GPU是实干家，他不会过多的去考虑那些有的没的，就是疯狂的干活。这种职责定位也导致了GPU不需要像CPU那样有复杂的分支预测、旁路预取等等控制逻辑，取而代之的是，将这些控制逻辑腾出来的空间统统用于计算。</p><p><strong>国务院(CPU)vs码头工厂(GPU)</strong><br>我们拿生活中场景类比一下，CPU可以看做一个国家的中央决策机构，它需要考虑的事情太多太复杂了，要兼顾国内、国外、经济、政治、文化等等一些乱七八糟的事务，这些事情繁琐复杂，因此需要配置强大的智能团，要考虑各种可能性，做多手准备。<br>相反，GPU可以看做是码头工厂，他每天要做的事情就是搬运货物，简单且重复，有砖就搬，没有就休息，才不会考虑外面是否洪水滔天。作为工厂老板，唯一要考虑的就是如何招更多的工人，如何修更宽的道路运送货物。对应到GPU架构中，则是如何塞更多的core，如何设计更高的显存带宽。</p><p>总而言之</p><ul><li>CPU是通用处理器，其<strong>设计原则就是对于各式各样的场景都能应付自如</strong>，所以cpu芯片内部很大一部分适用于控制逻辑和L3缓存的。</li><li>GPU是异构(相对于CPU采用不同的架构)的处理器，其<strong>设计原则就是尽可能提高计算吞吐量</strong>，适用场景为简单、重复但计算量大的任务，其控制逻辑很少，计算单元超多。</li></ul><h1 id="CPU体系架构简介"><a href="#CPU体系架构简介" class="headerlink" title="CPU体系架构简介"></a>CPU体系架构简介</h1><p>我们先简单介绍一下CPU的体系架构，看看它为什么不擅长做重复计算，以及如何改造才能获取更好的计算性能。</p><p><img src="https://common-1256796170.cos.ap-nanjing.myqcloud.com/blog/melon_park/computer-overview.png" alt="此处输入图片的描述"></p><p>上图是一个overview，我们仔细看下CPU芯片的物理结构图，如下：<br><img src="https://common-1256796170.cos.ap-nanjing.myqcloud.com/blog/melon_park/i7CpuLayout.png" alt="此处输入图片的描述"></p><p>我们可以看到，在CPU芯片内部，真正做计算的core一共就8个，其占整个芯片的面积大概不到40%，芯片面积主要给了L3缓存以及缓存控制器，即便是core，其中真正做计算的Alu也是比较少的。为什么会这样设计呢？原因就是因为cpu是以控制逻辑为主。我们知道，为了提高ipc，cpu引入了流水线，流水线本身是会增加延时以及芯片面积的，而为了保证流水线的有效性，又增加了许多额外的控制电路，例如分支预测、分支断定、旁路电路等，这些电路又挤占了真正干活的alu空间，导致cpu计算性能其实并不高。</p><p>如果面对例如科学计算这些计算量奇高，但逻辑并不复杂甚至可以说单一的任务，cpu就明显力不从心了。那应该怎么做呢？思路很简单，但就是打造”血汗工厂“，可以从以下三个方面着手：</p><ul><li><strong>精兵简政</strong>：首先因为任务是计算密集型的，逻辑相对简单，因此可以把那些占地面积大，又不干活的“臃肿”的控制机构统统去掉，全部换为计算单元，只留下几个包工头。由之前的几个、十几个核心增加到几百个，上千个核心。</li><li><strong>要想富，广修路</strong>：算力提升了，但数据还不够，不能白白浪费劳力呀。因此需要提升显存与计算单元的通信带宽，由之前的4车道改为16车道甚至32车道，同时扩大仓库，这样工人们就不会处于无活可干的处境了。</li><li><strong>996、007</strong>：即便工人与货物够了，工厂还可能面临工人找借口偷懒的情况，例如计算core有时说数据还没有准备好，无法干活(指令间的数据依赖)。为了极度压榨工人价值，血汗工厂借鉴了多线程的思路，一个计算单元如果A任务pending了，就分配B任务给它，类似于超卖，让工人总有干不完的活。</li></ul><p>以上三点思路解释得比较通俗，我们具体看下GPU是如何实现以上3个指导方针的。</p><h1 id="GPU体系架构简介"><a href="#GPU体系架构简介" class="headerlink" title="GPU体系架构简介"></a>GPU体系架构简介</h1><p>从这一节开始我们会比较系统的介绍GPU体系架构。为了更好的理解，我们还是把GPU比作血汗工厂。首先我们列出一些相关的专业名词，看不懂没有关系，后文都会出更详细的解释与定义：</p><blockquote><ul><li><strong>流处理器</strong>（stream processor，SP）：也称为core，是GPU运算的最基本单元，类似于计算机组成课程中的CPU内部的ALU（不严谨），是执行计算的，是最普通，工厂中数目最多的工人。</li><li><strong>渲染核</strong>：（shader core：SP）：SP的另一个名称，或者说是SP的升级版，称为CUDA core，始于Fermi架构，你可以理解为经过科技升级，工种从民兵升级为剑士，变得更强。但是功能一样。</li><li><strong>双精度浮点运算单元</strong>（DP）：专用于双精度浮点运算的处理单元，一种特殊工种，只能用于双精度浮点运算。</li><li><strong>特殊功能单元</strong>（special function unit，SFU）:用来执行超越函数指令，如sin,cos 倒数，平方根等函数，另一种强大而又特殊的工种。</li><li><strong>流处理器</strong>（stream multiprocessors，SM）：从英文名字就可以理解出来，流处理器的集合，是GPU架构中的基本计算单元，可以理解为工厂架构中的车间，，由SP，DP，SFU等运算单元组成（DP和SFU是其他工种）。</li><li><strong>SMX</strong>：Kepler架构中的SM。</li><li><strong>SMM</strong>：Maxwell架构中的SM。</li><li><strong>线程处理器簇</strong>（thread processing cluster，TPC），由SM控制器，多个SM和L1cache（L1缓存）组成。可以理解为工厂架构中部门，其中L1cache为一个多个SM公用的缓存，可以理解为多个车间公用的一个小仓库，存有一些必要的数据，避免了总是去全局总仓库取物品的时间浪费。（学过计算机组成的同学可能很好理解）。</li><li><strong>图形处理器簇</strong>（graph processing cluster，GPC）：类似与TPC，可以理解为工厂架构中的部门，但是不是TPC的替代品，再Pascal架构中，同时出现了GPC和TPC，且GPC包含TPC，可以理解为一级部门和二级部门。但是有的架构中没有TPC，有的架构中没有GPC，有的架构中TPC，GPC都没有，有的架构中TPC，GPC都有。说到底，部门这个概念本身就很弱，你可以把两个车间分配为一个部门，可以三个车间分配为一个部门。今天你可能和你对面的妹纸是一个部门的，明天可能由于组织架构调整，就和她不是一个部门了，但是她还是坐在你的对面。</li><li><strong>流处理器阵列</strong>（scalable streaming processor array，SPA）：所有处理器核心和高速缓存的综合，包含所有的SM，TPC，GPC.与存储系统共同构成GPU架构。也就是说，这里把所有的车间，和车间之间公用的小仓库（小仓库认为属于车间或多个车间共同私有），有一个算一个，都加起来，称为SPA，类似于全体生产部门，那么，整个工厂由全体生产部门+仓库构成。</li><li><strong>存储控制器</strong>（memory controller,MMC）顾名思义，控制存储访问单元，我们可以想象每次从总仓库去取物品，都需要一个指挥，一个运输小车，一个工人专程开车去取。MMC就是这个指挥官。</li><li><strong>存取单元</strong>（load/store unites，LD/ST）。运输小车？</li></ul></blockquote><h1 id="GPU存储架构简介"><a href="#GPU存储架构简介" class="headerlink" title="GPU存储架构简介"></a>GPU存储架构简介</h1><h1 id="Nvidia-GPU芯片简介"><a href="#Nvidia-GPU芯片简介" class="headerlink" title="Nvidia GPU芯片简介"></a>Nvidia GPU芯片简介</h1>]]></content>
      
      
      
        <tags>
            
            <tag> cuda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解golang汇编</title>
      <link href="/2021/07/25/golang-plan9-sam/"/>
      <url>/2021/07/25/golang-plan9-sam/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是plan9汇编"><a href="#什么是plan9汇编" class="headerlink" title="什么是plan9汇编"></a>什么是plan9汇编</h1><p>Plan9 汇编语言是 Plan9 操作系统的汇编器支持的汇编语言。虽然plan9 OS并不算成功，但因为Golang的开发团队和Plan9 OS的团队基本差不多，golang选择Plan9汇编也就情有可原了。</p><p>Plan9汇编基本沿用的是用AT&amp;T格式。</p><h1 id="常量与全局变量"><a href="#常量与全局变量" class="headerlink" title="常量与全局变量"></a>常量与全局变量</h1><p>定义变量一般需要俩个步骤，分别是定义和赋值(因为go中所有变量都是初始化了的).<br>其中定义的语法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBL symbol(SB), width</span><br></pre></td></tr></table></figure><br>赋值的语法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATA symbol+offset(SB)&#x2F;width, value</span><br></pre></td></tr></table></figure><br>这里<code>offset</code>是相对<code>symbol</code>的偏移，<code>width</code>是这次被赋值的内存长度，<code>value</code>是值。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>Go汇编语言中常量以$美元符号为前缀。常量的类型有整数常量、浮点数常量、字符常量和字符串常量等几种类型。以下是几种类型常量的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$1           &#x2F;&#x2F; 十进制</span><br><span class="line">$0xf4f8fcff  &#x2F;&#x2F; 十六进制</span><br><span class="line">$1.5         &#x2F;&#x2F; 浮点数</span><br><span class="line">$&#39;a&#39;         &#x2F;&#x2F; 字符</span><br><span class="line">$&quot;abcd&quot;      &#x2F;&#x2F; 字符串</span><br></pre></td></tr></table></figure></p><p>字符串常量标识为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> 先定义gopher字符串</span><br><span class="line">GLOBL ·NameData(SB),$8</span><br><span class="line">DATA  ·NameData(SB)&#x2F;8,$&quot;gopher&quot;</span><br><span class="line"></span><br><span class="line"> 然后赋值字符串的地址和长度</span><br><span class="line">GLOBL ·Name(SB),$16</span><br><span class="line">DATA  ·Name+0(SB)&#x2F;8,$·NameData(SB)</span><br><span class="line">DATA  ·Name+8(SB)&#x2F;8,$6</span><br></pre></td></tr></table></figure><br>其中<code>$·NameData(SB)</code>可以看作是地址常量</p><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>变量根据作用域和生命周期有全局变量和局部变量之分。</p><blockquote><ul><li>全局变量一般有着较为固定的内存地址，声明周期跨越整个程序运行时间。</li><li>局部变量一般是函数内定义的的变量，只有在函数被执行的时间才被在栈上创建，当函数调用完成后将回收（暂时不考虑闭包对局部变量捕获的问题）。</li></ul></blockquote><p>全局变量一般有定义和赋值俩个操作， 要定义全局变量，首先要声明一个变量对应的符号，以及变量对应的内存大小。导出变量符号的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBL symbol(SB), width</span><br></pre></td></tr></table></figure><br>GLOBL汇编指令用于定义名为symbol的变量，变量对应的内存宽度为width(内存的宽度必须是<strong>2的指数倍</strong>，编译器最终会保证变量的真实地址对齐到机器字倍数)，内存宽度部分必须用常量初始化。</p><blockquote><p>需要注意的是，在Go汇编中我们无法为count变量指定具体的类型。在汇编中定义全局变量时，我们只关心变量的名字和内存大小，变量最终的类型只能在Go语言中声明。</p></blockquote><p>变量定义之后，我们可以通过DATA汇编指令指定对应内存中的数据，语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATA symbol+offset(SB)&#x2F;width, value</span><br></pre></td></tr></table></figure><br>这里<code>offset</code>是相对<code>symbol</code>的偏移，<code>width</code>是这次被赋值的内存长度，<code>value</code>是值。<br>一个示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GLOBL ·count(SB),$4   #定义全局变量count，占4个字节</span><br><span class="line">DATA ·count+0(SB)&#x2F;1,$1  #开始为count变量的4个字节赋值，分别赋值1、2、3、4</span><br><span class="line">DATA ·count+1(SB)&#x2F;1,$2</span><br><span class="line">DATA ·count+2(SB)&#x2F;1,$3</span><br><span class="line">DATA ·count+3(SB)&#x2F;1,$4</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; or</span><br><span class="line"></span><br><span class="line">DATA ·count+0(SB)&#x2F;4,$0x04030201 #注意x86是小端</span><br></pre></td></tr></table></figure></p><h2 id="更多go类型示例"><a href="#更多go类型示例" class="headerlink" title="更多go类型示例"></a>更多go类型示例</h2><ul><li><p><strong>int型变量</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    GLOBL ·int32Value(SB),$4     &#x2F;&#x2F; var int32Value int32</span><br><span class="line">DATA ·int32Value+0(SB)&#x2F;1,$0x01  &#x2F;&#x2F; 第0字节</span><br><span class="line">DATA ·int32Value+1(SB)&#x2F;1,$0x02  &#x2F;&#x2F; 第1字节</span><br><span class="line">DATA ·int32Value+2(SB)&#x2F;2,$0x03  &#x2F;&#x2F; 第3-4字节</span><br><span class="line"></span><br><span class="line">    GLOBL ·uint32Value(SB),$4    &#x2F;&#x2F;var uint32Value uint32</span><br><span class="line">DATA ·uint32Value(SB)&#x2F;4,$0x01020304 &#x2F;&#x2F; 第1-4字节</span><br></pre></td></tr></table></figure></li><li><p><strong>bool型变量</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    GLOBL ·boolValue(SB),$1   &#x2F;&#x2F; 未初始化</span><br><span class="line"></span><br><span class="line">    GLOBL ·trueValue(SB),$1   &#x2F;&#x2F; var trueValue &#x3D; true</span><br><span class="line">DATA ·trueValue(SB)&#x2F;1,$1  &#x2F;&#x2F; 非 0 均为 true</span><br><span class="line"></span><br><span class="line">    GLOBL ·falseValue(SB),$1  &#x2F;&#x2F; var falseValue &#x3D; true</span><br><span class="line">DATA ·falseValue(SB)&#x2F;1,$0</span><br></pre></td></tr></table></figure></li><li><p><strong>数组型变量</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GLOBL ·num(SB),$16</span><br><span class="line">DATA ·num+0(SB)&#x2F;8,$0</span><br><span class="line">DATA ·num+8(SB)&#x2F;8,$0</span><br></pre></td></tr></table></figure></li><li><p><strong>float型变量</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    GLOBL ·float32Value(SB),$4</span><br><span class="line">DATA ·float32Value+0(SB)&#x2F;4,$1.5      &#x2F;&#x2F; var float32Value &#x3D; 1.5</span><br><span class="line"></span><br><span class="line">    GLOBL ·float64Value(SB),$8</span><br><span class="line">DATA ·float64Value(SB)&#x2F;8,$0x01020304 &#x2F;&#x2F; bit 方式初始化</span><br></pre></td></tr></table></figure></li><li><p><strong>string类型变量</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    GLOBL ·helloworld(SB),$16   &#x2F;&#x2F; var helloworld string</span><br><span class="line"></span><br><span class="line">    GLOBL text&lt;&gt;(SB),NOPTR,$16  &#x2F;&#x2F; 准备私有变量text，字符串的真正内容</span><br><span class="line">DATA text&lt;&gt;+0(SB)&#x2F;8,$&quot;Hello Wo&quot;</span><br><span class="line">DATA text&lt;&gt;+8(SB)&#x2F;8,$&quot;rld!&quot;</span><br><span class="line"></span><br><span class="line">    DATA ·helloworld+0(SB)&#x2F;8,$text&lt;&gt;(SB) &#x2F;&#x2F; StringHeader.Data</span><br><span class="line">DATA ·helloworld+8(SB)&#x2F;8,$12         &#x2F;&#x2F; StringHeader.Len</span><br></pre></td></tr></table></figure></li><li><p><strong>slice类型变量</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    GLOBL ·helloworld(SB),$24            &#x2F;&#x2F; var helloworld []byte(&quot;Hello World!&quot;)</span><br><span class="line">DATA ·helloworld+0(SB)&#x2F;8,$text&lt;&gt;(SB) &#x2F;&#x2F; StringHeader.Data</span><br><span class="line">DATA ·helloworld+8(SB)&#x2F;8,$12         &#x2F;&#x2F; StringHeader.Len</span><br><span class="line">DATA ·helloworld+16(SB)&#x2F;8,$16        &#x2F;&#x2F; StringHeader.Cap</span><br><span class="line"></span><br><span class="line">    GLOBL text&lt;&gt;(SB),$16</span><br><span class="line">DATA text&lt;&gt;+0(SB)&#x2F;8,$&quot;Hello Wo&quot;      &#x2F;&#x2F; ...string data...</span><br><span class="line">DATA text&lt;&gt;+8(SB)&#x2F;8,$&quot;rld!&quot;          &#x2F;&#x2F; ...string data...</span><br></pre></td></tr></table></figure></li><li><p><strong>map/channel类型变量</strong><br><code>map</code>和<code>channel</code>比较特殊，它们只是一种未知类型的指针，无法直接初始化。在汇编代码中我们只能为类似变量定义并进行0值初始化：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    var m map[string]int</span><br><span class="line">GLOBL ·m(SB),$8  &#x2F;&#x2F; var m map[string]int</span><br><span class="line">DATA  ·m+0(SB)&#x2F;8,$0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var ch chan int</span><br><span class="line">GLOBL ·ch(SB),$8 &#x2F;&#x2F; var ch chan int</span><br><span class="line">DATA  ·ch+0(SB)&#x2F;8,$0</span><br></pre></td></tr></table></figure></li></ul><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><p>下图是代码段的内存布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GLOBL ·num(SB),$16</span><br><span class="line">DATA ·num+0(SB)&#x2F;8,$0</span><br><span class="line">DATA ·num+8(SB)&#x2F;8,$0</span><br></pre></td></tr></table></figure><br><img src="https://common-1256796170.cos.ap-nanjing.myqcloud.com/blog/melon_park/asm_go_mem_layout.png" alt="内存布局"></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>函数的定义的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TEXT [pkg]·symbol(SB), [flags,] $framesize[-argsize]</span><br></pre></td></tr></table></figure><br>其中：</p><ul><li><code>symbol</code>是函数符号，可以省略包名。</li><li><code>flag</code>是函数的一些标志，以后再讲。</li><li><code>framesize</code>是栈的大小，其中包含调用其它函数时准备调用参数的隐式栈空间</li><li><code>argsize</code>是caller传递的参数+返回值大小，注意构成<code>argsize</code>的对象并是不在callee的调用栈中的，而是在caller的栈中。可省略，编译器会自动推导出来。</li></ul><p>作为全局标识符的全局函数，和全局变量一样，名字一般都是基于SB伪寄存器的相对地址。</p><h2 id="伪寄存器"><a href="#伪寄存器" class="headerlink" title="伪寄存器"></a>伪寄存器</h2><p>Plan9提供了4个伪寄存器，之所以是”伪”，是因为这几个寄存器是不存在的，都是编译器根据其它真实的物理寄存器给推导出来的。这4个伪寄存器对Plan9汇编函数来说很重要，参数、返回值、局部变量都是依赖这4个伪寄存器的。4个伪寄存器的官方定义如下：</p><ul><li>FP: Frame pointer: arguments and locals.</li><li>PC: Program counter: jumps and branches.</li><li>SB: Static base pointer: global symbols.</li><li>SP: Stack pointer: top of stack.</li></ul><p>这里再补充一些个人理解：</p><ul><li><code>FP</code>是caller的栈顶指针，用于记录callee的参数；</li><li><code>SP</code>是callee的栈底指针(即callee的物理BP)，用来记录callee的局部变量。</li><li><code>SB</code>和<code>SP</code>没啥可说的。</li></ul><p>尤其需要注意的是：</p><blockquote><ul><li>在手写代码时，伪 SP 和硬件 SP 是不一样的，区分方法是看该 SP 前是否有 symbol。如果有 symbol，那么即为伪寄存器，如果没有，那么说明是硬件 SP 寄存器。但务必注意，对于编译输出(go tool compile -S / go tool objdump)的代码来讲，目前所有的 SP 都是硬件寄存器 SP，无论是否带 symbol。</li><li>SP 和 FP 的相对位置是会变的，所以不应该尝试用伪 SP 寄存器去找那些用 FP + offset 来引用的值，例如函数的入参和返回值。SP和FP的相对位置之所以会变化，是因为caller BP（见下图函数栈布局）是在编译期由编译器插入的，用户手写代码时，计算 frame size 时是不包括这个 caller BP 部分的。是否插入 caller BP 的主要判断依据是:<ul><li>函数的栈帧大小&gt; 0</li><li>framepointer_enabled != 0 &amp;&amp; goarch == “amd64” &amp;&amp; goos != “nacl”<br>如果编译器在最终的汇编结果中没有插入 caller BP，伪 SP 和伪 FP 之间只有 8 个字节的 caller 的 return address，而插入了 BP 的话，就会多出额外的 8 字节。</li></ul></li></ul></blockquote><p>一个典型的函数栈布局如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">-----------------</span><br><span class="line">current func arg0</span><br><span class="line">----------------- &lt;----------- FP(pseudo FP)</span><br><span class="line"> caller ret addr</span><br><span class="line">+---------------+</span><br><span class="line">| caller BP(*)  |</span><br><span class="line">----------------- &lt;----------- SP(pseudo SP，实际上是当前栈帧的 BP 位置)</span><br><span class="line">|   Local Var0  |</span><br><span class="line">-----------------</span><br><span class="line">|   Local Var1  |</span><br><span class="line">-----------------</span><br><span class="line">|   Local Var2  |</span><br><span class="line">-----------------                -</span><br><span class="line">|   ........    |</span><br><span class="line">-----------------</span><br><span class="line">|   Local VarN  |</span><br><span class="line">-----------------</span><br><span class="line">|               |</span><br><span class="line">|               |</span><br><span class="line">|  temporarily  |</span><br><span class="line">|  unused space |</span><br><span class="line">|               |</span><br><span class="line">|               |</span><br><span class="line">-----------------</span><br><span class="line">|  call retn    |</span><br><span class="line">-----------------</span><br><span class="line">|  call ret(n-1)|</span><br><span class="line">-----------------</span><br><span class="line">|  ..........   |</span><br><span class="line">-----------------</span><br><span class="line">|  call ret1    |</span><br><span class="line">-----------------</span><br><span class="line">|  call argn    |</span><br><span class="line">-----------------</span><br><span class="line">|   .....       |</span><br><span class="line">-----------------</span><br><span class="line">|  call arg3    |</span><br><span class="line">-----------------</span><br><span class="line">|  call arg2    |</span><br><span class="line">|---------------|</span><br><span class="line">|  call arg1    |</span><br><span class="line">-----------------   &lt;------------  hardware SP 位置</span><br><span class="line">| return addr   |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure></p><h2 id="汇编函数示例"><a href="#汇编函数示例" class="headerlink" title="汇编函数示例"></a>汇编函数示例</h2><p><strong>示例一</strong><br>math.go:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func add(a, b int) int &#x2F;&#x2F; 汇编函数声明</span><br><span class="line"></span><br><span class="line">func sub(a, b int) int &#x2F;&#x2F; 汇编函数声明</span><br><span class="line"></span><br><span class="line">func mul(a, b int) int &#x2F;&#x2F; 汇编函数声明</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(add(10, 11))</span><br><span class="line">    fmt.Println(sub(99, 15))</span><br><span class="line">    fmt.Println(mul(11, 12))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>math.s:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;textflag.h&quot; &#x2F;&#x2F; 因为我们声明函数用到了 NOSPLIT 这样的 flag，所以需要将 textflag.h 包含进来</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; func add(a, b int) int</span><br><span class="line">TEXT ·add(SB), NOSPLIT, $0-24</span><br><span class="line">    MOVQ a+0(FP), AX &#x2F;&#x2F; 参数 a</span><br><span class="line">    MOVQ b+8(FP), BX &#x2F;&#x2F; 参数 b</span><br><span class="line">    ADDQ BX, AX    &#x2F;&#x2F; AX +&#x3D; BX</span><br><span class="line">    MOVQ AX, ret+16(FP) &#x2F;&#x2F; 返回</span><br><span class="line">    RET</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; func sub(a, b int) int</span><br><span class="line">TEXT ·sub(SB), NOSPLIT, $0-24</span><br><span class="line">    MOVQ a+0(FP), AX</span><br><span class="line">    MOVQ b+8(FP), BX</span><br><span class="line">    SUBQ BX, AX    &#x2F;&#x2F; AX -&#x3D; BX</span><br><span class="line">    MOVQ AX, ret+16(FP)</span><br><span class="line">    RET</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; func mul(a, b int) int</span><br><span class="line">TEXT ·mul(SB), NOSPLIT, $0-24</span><br><span class="line">    MOVQ  a+0(FP), AX</span><br><span class="line">    MOVQ  b+8(FP), BX</span><br><span class="line">    IMULQ BX, AX    &#x2F;&#x2F; AX *&#x3D; BX</span><br><span class="line">    MOVQ  AX, ret+16(FP)</span><br><span class="line">    RET</span><br><span class="line">    &#x2F;&#x2F; 最后一行的空行是必须的，否则可能报 unexpected EOF</span><br></pre></td></tr></table></figure><br>把这两个文件放在任意目录下，执行 <code>go build</code> 并运行就可以看到效果了。</p><p><strong>示例二</strong><br>来写一段简单的代码证明伪 SP、伪 FP 和硬件 SP 的位置关系。<br>spspfp.s:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;textflag.h&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; func output(int) (int, int, int)</span><br><span class="line">TEXT ·output(SB), $8-48</span><br><span class="line">    MOVQ 24(SP), DX &#x2F;&#x2F; 不带 symbol，这里的 SP 是硬件寄存器 SP</span><br><span class="line">    MOVQ DX, ret3+24(FP) &#x2F;&#x2F; 第三个返回值</span><br><span class="line">    MOVQ perhapsArg1+16(SP), BX &#x2F;&#x2F; 当前函数栈大小 &gt; 0，所以 FP 在 SP 的上方 16 字节处</span><br><span class="line">    MOVQ BX, ret2+16(FP) &#x2F;&#x2F; 第二个返回值</span><br><span class="line">    MOVQ arg1+0(FP), AX</span><br><span class="line">    MOVQ AX, ret1+8(FP)  &#x2F;&#x2F; 第一个返回值</span><br><span class="line">    RET</span><br></pre></td></tr></table></figure><br>spspfp.go:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func output(int) (int, int, int) &#x2F;&#x2F; 汇编函数声明</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    a, b, c :&#x3D; output(987654321)</span><br><span class="line">    fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>执行上面的代码，可以得到输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">987654321 987654321 987654321</span><br></pre></td></tr></table></figure><br>和代码结合思考，可以知道我们当前的栈结构是这样的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">------</span><br><span class="line">ret2 (8 bytes)</span><br><span class="line">------</span><br><span class="line">ret1 (8 bytes)</span><br><span class="line">------</span><br><span class="line">ret0 (8 bytes)</span><br><span class="line">------</span><br><span class="line">arg0 (8 bytes)</span><br><span class="line">------ FP</span><br><span class="line">ret addr (8 bytes)</span><br><span class="line">------</span><br><span class="line">caller BP (8 bytes)</span><br><span class="line">------ pseudo SP</span><br><span class="line">frame content (8 bytes)</span><br><span class="line">------ hardware SP</span><br></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://chai2010.cn/advanced-go-programming-book/ch3-asm/ch3-04-func.html" target="_blank" rel="noopener">https://chai2010.cn/advanced-go-programming-book/ch3-asm/ch3-04-func.html</a><br><a href="https://xargin.com/plan9-assembly/" target="_blank" rel="noopener">https://xargin.com/plan9-assembly/</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="/2019/11/01/Hexo-Theme-Snail/"/>
      <url>/2019/11/01/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-snail"><a href="#hexo-theme-snail" class="headerlink" title="hexo-theme-snail"></a>hexo-theme-snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>Hexo-theme-snail is a succinct hexo theme. It has two colors, light and star, that can be set according to your own preferences in the settings, and also has the functions of sharing and commenting. More features are under development.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>light color theme and star theme</li><li>diversified comment system</li><li>notice tips</li><li>share to other platforms (under development)</li><li>picture sharing (under development)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>Modify the value of <code>theme:</code> in <code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure></p><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>Replace the following information with your own.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>Put customized pictures in <code>img</code> directory.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure></p><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>If you don’t want to display it, you can delete it directly.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Dusign!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/ironman-draw.png</span>      <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/`</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># whether or not using Feature-Tags</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">1</span>              <span class="comment"># A tag will be featured if the size of it is more than this condition value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Blog"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://blog.csdn.net/d_Nail"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Web"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Github"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://github.com/dusign"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>See httpymls://github.com/imsun/gitment for detailed configuration method.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## This comment system is gitment</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## If there is no effect after modification, please empty the cache and try again.</span></span><br><span class="line"><span class="comment">## ⚠️ The following special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h2><p>V1.0</p><ul><li>fix the bugs</li><li>add comment system</li><li>add notice tips</li><li>add star sheme</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache License 2.0 Copyright(c) 2018-2020 <a href="https://github.com/dusign" target="_blank" rel="noopener">Dusign</a>   </p><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">hexo-theme-snail</a> is derived from <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Huxpro</a> Apache License 2.0. Copyright (c) 2015-2020 Huxpro</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-snail </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
